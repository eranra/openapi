{
  "openapi": "3.0.1",
  "info": {
    "title": "Introduction to Instana public APIs",
    "termsOfService": "https://www.instana.com/terms-of-use/",
    "contact": {
      "name": "Â© Instana",
      "url": "http://instana.com",
      "email": "support@instana.com"
    },
    "version": "1.147.0",
    "x-logo": {
      "url": "header-logo.svg",
      "backgroundColor": "#031F29",
      "altText": "instana logo"
    },
    "description": "## Agent REST API\n### Event SDK REST Web Service\nUsing the Event SDK REST Web Service, it is possible to integrate custom health checks and other event sources into Instana. Each one running the Instana Agent can be used to feed in manual events. The agent has an endpoint which listens on `http://localhost:42699/com.instana.plugin.generic.event` and accepts the following JSON via a POST request:\n\n```json\n{\n    \"title\": <string>,\n    \"text\": <string>,\n    \"severity\": <integer> , -1, 5 or 10\n    \"timestamp\": <integer>, timestamp in milliseconds from epoch\n    \"duration\": <integer>, duration in milliseconds\n}\n```\n\n*Title* and *text* are used for display purposes.\n\n*Severity* is an optional integer of -1, 5 and 10. A value of -1 or EMPTY will generate a Change. A value of 5 will generate a *warning Issue*, and a value of 10 will generate a *critical Issue*.\n\nWhen absent, the event is treated as a change without severity. *Timestamp* is the timestamp of the event, but it is optional, in which case the current time is used. *Duration* can be used to mark a timespan for the event. It also is optional, in which case the event will be marked as \"instant\" rather than \"from-to.\"\n\nThe endpoint also accepts a batch of events, which then need to be given as an array:\n\n```json\n[\n    {\n    // event as above\n    },\n    {\n    // event as above\n    }\n]\n```\n\n#### Ruby Example\n\n```ruby\nduration = (Time.now.to_f * 1000).floor - deploy_start_time_in_ms\npayload = {}\npayload[:title] = 'Deployed MyApp'\npayload[:text] = 'pglombardo deployed MyApp@revision'\npayload[:duration] = duration\n\nuri = URI('http://localhost:42699/com.instana.plugin.generic.event')\nreq = Net::HTTP::Post.new(uri, 'Content-Type' => 'application/json')\nreq.body = payload.to_json\nNet::HTTP.start(uri.hostname, uri.port) do |http|\n    http.request(req)\nend\n```\n\n#### Curl Example\n\n```bash\ncurl -XPOST http://localhost:42699/com.instana.plugin.generic.event -H \"Content-Type: application/json\" -d '{\"title\":\"Custom API Events \", \"text\": \"Failure Redeploying Service Duration\", \"duration\": 5000, \"severity\": -1}'\n```\n\n#### PowerShell Example\n\nFor Powershell you can either use the standard Cmdlets `Invoke-WebRequest` or `Invoke-RestMethod`. The parameters to be provided are basically the same.\n\n```bash\nInvoke-RestMethod\n    -Uri http://localhost:42699/com.instana.plugin.generic.event\n    -Method POST\n    -Body '{\"title\":\"PowerShell Event \", \"text\": \"You used PowerShell to create this event!\", \"duration\": 5000, \"severity\": -1}'\n```\n\n```bash\nInvoke-WebRequest\n    -Uri http://localhost:42699/com.instana.plugin.generic.event\n    -Method Post\n    -Body '{\"title\":\"PowerShell Event \", \"text\": \"You used PowerShell to create this event!\", \"duration\": 5000, \"severity\": -1}'\n```\n## Backend REST API\nThe Instana API allows retrieval and configuration of key data points. Among others, this API enables automatic reaction and further analysis of identified incidents as well as reporting capabilities.\n\nThe API documentation referes to two crucial parameters that you need to know about before reading further:\nbase: This is the base URL of a tenant unit, e.g. `https://test-example.instana.io`. This is the same URL that is used to access the Instana user interface.\napiToken: Requests against the Instana API require valid API tokens. An initial API token can be generated via the Instana user interface. Any additional API tokens can be generated via the API itself.\n### Rate Limiting\nA rate limit is applied to API usage. Up to 5,000 calls per hour can be made. How many remaining calls can be made and when this call limit resets, can inspected via three headers that are part of the responses of the API server.\n\n**X-RateLimit-Limit:** Shows the maximum number of calls that may be executed per hour.\n\n**X-RateLimit-Remaining:** How many calls may still be executed within the current hour.\n\n**X-RateLimit-Reset:** Time when the remaining calls will be reset to the limit. For compatibility reasons with other rate limited APIs, this date is not the date in milliseconds, but instead in seconds since 1970-01-01T00:00:00+00:00.\n\n## Generating REST API clients\n\nThe API is specified using the [OpenAPI v3](https://github.com/OAI/OpenAPI-Specification) (previously known as Swagger) format. You can download the current specification at our [GitHub API documentation](https://instana.github.io/openapi/openapi.yaml).\n\nOpenAPI tries to solve the issue of ever-evolving APIs and clients lagging behind. To generate a client library for your language, you can use the [OpenAPI client generators](https://github.com/OpenAPITools/openapi-generator).\n\nTo generate a client library for Go to interact with our backend, you can use the following script (you need a JDK and `wget`):\n\n```bash\n# Download the generator to your current working directory:\nwget http://central.maven.org/maven2/org/openapitools/openapi-generator-cli/3.2.3/openapi-generator-cli-3.2.3.jar -O openapi-generator-cli.jar\n\n# generate a client library that you can vendor into your repository\njava -jar openapi-generator-cli.jar generate -i https://instana.github.io/openapi/openapi.yaml -g go \\\n    -o pkg/instana/openapi \\\n    --skip-validate-spec\n\n# (optional) format the Go code according to the Go code standard\ngofmt -s -w pkg/instana/openapi\n```\n\nThe generated clients contain comprehensive READMEs. To use the client from the example above, you can start right away:\n\n```go\nimport instana \"./pkg/instana/openapi\"\n\n// readTags will read all available application monitoring tags along with their type and category\nfunc readTags() {\n\tconfiguration := instana.NewConfiguration()\n\tconfiguration.Host = \"tenant-unit.instana.io\"\n\tconfiguration.BasePath = \"https://tenant-unit.instana.io\"\n\n\tclient := instana.NewAPIClient(configuration)\n\tauth := context.WithValue(context.Background(), instana.ContextAPIKey, instana.APIKey{\n\t\tKey:    apiKey,\n\t\tPrefix: \"apiToken\",\n\t})\n\n\ttags, _, err := client.ApplicationCatalogApi.GetTagsForApplication(auth)\n\tif err != nil {\n\t\tfmt.Fatalf(\"Error calling the API, aborting.\")\n\t}\n    \n\tfor _, tag := range tags {\n\t\tfmt.Printf(\"%s (%s): %s\\n\", tag.Category, tag.Type, tag.Name)\n\t}\n}\n```\n"
  },
  "servers": [
    {
      "url": "https://{unit}-{tenant}.instana.io",
      "description": "Instana Backend",
      "variables": {
        "tenant": {
          "description": "Customer tenant unit"
        },
        "unit": {
          "description": "Customer tenant name"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Infrastructure Metrics"
    },
    {
      "name": "Infrastructure Resources"
    },
    {
      "name": "Infrastructure Catalog"
    },
    {
      "name": "Application Metrics"
    },
    {
      "name": "Application Catalog"
    },
    {
      "name": "Application Resources"
    },
    {
      "name": "Application Analyze"
    },
    {
      "name": "Application Settings"
    },
    {
      "name": "Website Metrics"
    },
    {
      "name": "Website Catalog"
    },
    {
      "name": "Website Analyze"
    },
    {
      "name": "Alerts"
    },
    {
      "name": "Events"
    },
    {
      "name": "Event Settings"
    },
    {
      "name": "User"
    },
    {
      "name": "Audit Log"
    },
    {
      "name": "API Token"
    },
    {
      "name": "Maintenance Configuration"
    },
    {
      "name": "Synthetic Calls"
    },
    {
      "name": "Health"
    },
    {
      "name": "Usage"
    }
  ],
  "paths": {
    "/api/application-monitoring/analyze/trace-groups": {
      "post": {
        "tags": [
          "Application Analyze"
        ],
        "summary": "Trace group metrics",
        "operationId": "getTraceGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTraceGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TraceGroupsResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/application-monitoring/analyze/traces": {
      "get": {
        "tags": [
          "Application Analyze"
        ],
        "summary": "Trace detail",
        "operationId": "getTrace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "matrix",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullTrace"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Application Analyze"
        ],
        "summary": "Filtering traces",
        "operationId": "getTraces",
        "requestBody": {
          "content": {
            "application/json": {
              "x-example": "GetTraces"
            }
          }
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TraceResult"
                }
              }
            },
            "x-example": "TraceResult"
          }
        },
        "x-code-samples": [
          {
            "lang": "JAVA",
            "source": "CloseableHttpClient client = HttpClients.createDefault();\nString url = \"https://unit-tenant.instana.com/api/application-monitoring/analyse/traces\";\nHttpPost httpPost = new HttpPost(url);\nString json = \"{\"\n            + \"\\\"pagination\\\":{\\\"retrievalSize\\\":20,\\\"offset\\\":0},\"\n            + \"\\\"timeFrame\\\":{\\\"windowSize\\\":3600000}\"\n            + \"}\"\nStringEntity entity = new StringEntity(json);\nhttpPost.setEntity(entity);\nhttpPost.setHeader(\"Accept\", \"application/json\");\nhttpPost.setHeader(\"Content-type\", \"application/json\");\nhttpPost.setHeader(\"Authorization\", \"apiToken xxxxxxxx\");\n\nCloseableHttpResponse response = client.execute(httpPost);\n\nassertThat(response.getStatusLine().getStatusCode(), equalTo(200));\nString traceResult = EntityUtils.toString(response.getEntity());\nclient.close();\n"
          }
        ]
      }
    },
    "/api/application-monitoring/analyze/call-groups": {
      "post": {
        "tags": [
          "Application Analyze"
        ],
        "summary": "Call group metrics",
        "operationId": "getCallGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCallGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallGroupsResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/application-monitoring/metrics/applications": {
      "post": {
        "tags": [
          "Application Metrics"
        ],
        "summary": "Application Metrics",
        "operationId": "getApplicationMetrics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetApplications"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationMetricResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/application-monitoring/metrics/services": {
      "post": {
        "tags": [
          "Application Metrics"
        ],
        "summary": "Service metrics",
        "operationId": "getServicesMetrics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetServices"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceMetricResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/application-monitoring/metrics/endpoints": {
      "post": {
        "tags": [
          "Application Metrics"
        ],
        "summary": "Endpoint metrics",
        "operationId": "getEndpointsMetrics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetEndpoints"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointMetricResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/application-monitoring/applications": {
      "get": {
        "tags": [
          "Application Resources"
        ],
        "summary": "Get applications",
        "operationId": "getApplications",
        "parameters": [
          {
            "name": "nameFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "windowSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/application-monitoring/applications/services/endpoints": {
      "get": {
        "tags": [
          "Application Resources"
        ],
        "summary": "Get endpoints",
        "operationId": "application.resources.endpoints",
        "parameters": [
          {
            "name": "nameFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "technologies",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "windowSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/application-monitoring/applications/services": {
      "get": {
        "tags": [
          "Application Resources"
        ],
        "summary": "Get applications/services",
        "operationId": "getApplicationServices",
        "parameters": [
          {
            "name": "nameFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "windowSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/application-monitoring/services": {
      "get": {
        "tags": [
          "Application Resources"
        ],
        "summary": "Get services",
        "operationId": "getServices",
        "parameters": [
          {
            "name": "nameFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "windowSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/application-monitoring/catalog/metrics": {
      "get": {
        "tags": [
          "Application Catalog"
        ],
        "summary": "Metric descriptions",
        "operationId": "getMetricDefinitions",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricDescription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/application-monitoring/catalog/tags": {
      "get": {
        "tags": [
          "Application Catalog"
        ],
        "summary": "Tag catalog",
        "operationId": "getTagsForApplication",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/application-monitoring/settings/application/{id}": {
      "get": {
        "tags": [
          "Application Settings"
        ],
        "summary": "Application configuration",
        "operationId": "getApplicationConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Application Settings"
        ],
        "summary": "Update application configuration",
        "operationId": "putApplicationConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Application Settings"
        ],
        "summary": "Delete application configuration",
        "operationId": "deleteApplicationConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      }
    },
    "/api/application-monitoring/settings/application": {
      "get": {
        "tags": [
          "Application Settings"
        ],
        "summary": "All Application configurations",
        "operationId": "getApplicationConfigs",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Application Settings"
        ],
        "summary": "Add application configuration",
        "operationId": "addApplicationConfig",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      }
    },
    "/api/application-monitoring/settings/http-endpoint": {
      "get": {
        "tags": [
          "Application Settings"
        ],
        "summary": "All Endpoint configurations",
        "operationId": "getEndpointConfigs",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpEndpointConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Application Settings"
        ],
        "summary": "Add endpoint configuration",
        "operationId": "add",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/HttpEndpointConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      }
    },
    "/api/application-monitoring/settings/http-endpoint/{serviceId}": {
      "get": {
        "tags": [
          "Application Settings"
        ],
        "summary": "Endpoint configuration",
        "operationId": "getEndpointConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpEndpointConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Application Settings"
        ],
        "summary": "Update endpoint configuration",
        "operationId": "putEndpointConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/HttpEndpointConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Application Settings"
        ],
        "summary": "Delete endpoint configuration",
        "operationId": "deleteEndpointConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/HttpEndpointConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      }
    },
    "/api/application-monitoring/settings/http-endpoint/testRules": {
      "post": {
        "tags": [
          "Application Settings"
        ],
        "summary": "Check endpoint Rules",
        "operationId": "testEndpointConfig",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HttpEndpointRule"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      }
    },
    "/api/application-monitoring/settings/service/{id}": {
      "get": {
        "tags": [
          "Application Settings"
        ],
        "summary": "Service configuration",
        "operationId": "getServiceConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Application Settings"
        ],
        "summary": "Update service configuration",
        "operationId": "putEndpointConfig_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ServiceConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Application Settings"
        ],
        "summary": "Delete service configuration",
        "operationId": "deleteEndpointConfig_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ServiceConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      }
    },
    "/api/application-monitoring/settings/service": {
      "get": {
        "tags": [
          "Application Settings"
        ],
        "summary": "All service configurations",
        "operationId": "getServiceConfigs",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Application Settings"
        ],
        "summary": "Add service configuration",
        "operationId": "addEndpointConfig",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ServiceConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      }
    },
    "/api/application-monitoring/settings/service/order": {
      "put": {
        "tags": [
          "Application Settings"
        ],
        "summary": "Order of service configuration",
        "operationId": "orderEndpointConfig",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      }
    },
    "/api/events/alerts/anomaly": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "All Anomalies",
        "operationId": "getAnomalies",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnomalyAlert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/alerts/anomaly/{alertId}": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Anomaly",
        "operationId": "getAnomaly",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnomalyAlert"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Alerts"
        ],
        "summary": "Set anomaly",
        "operationId": "putAnomaly",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AnomalyAlert"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnomalyAlert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/alerts/{alertId}": {
      "delete": {
        "tags": [
          "Alerts"
        ],
        "summary": "Delete alert",
        "operationId": "deleteAnomaly",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AnomalyAlert"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/{eventId}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Event",
        "operationId": "getEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Fetch alerts",
        "operationId": "getEvents",
        "parameters": [
          {
            "name": "windowsize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/settings/alerts/{id}": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Alerting",
        "operationId": "getAlert",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingConfiguration"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Update alerting",
        "operationId": "putAlert",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AlertingConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Delete alerting",
        "operationId": "deleteAlert",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AlertingConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/settings/alerts": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "All Alerting",
        "operationId": "getAlerts",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertingConfiguration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/settings/built-in-rules/{id}": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Built-in rule",
        "operationId": "getBuildInRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuiltInRuleSpecification"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Delete built-in rule",
        "operationId": "deleteBuildInRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/BuiltInRuleSpecification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/settings/built-in-rules": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "All built-in rules",
        "operationId": "getBuildInRules",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BuiltInRuleSpecification"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/settings/built-in-rules/{id}/enable": {
      "post": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Enable built-in rule",
        "operationId": "enableBuildInRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/settings/built-in-rules/{id}/disable": {
      "post": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Disable built-in rule",
        "operationId": "disableBuildInRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/settings/health-rules/{id}": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Health rule",
        "operationId": "getHealthRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthRule"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Update health rule",
        "operationId": "putHealthRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/HealthRule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Delete health rule",
        "operationId": "deleteHealthRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/HealthRule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/settings/health-rules": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "All health rules",
        "operationId": "getHealthRules",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthRule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/settings/integrations/{id}": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Integration channel",
        "operationId": "getIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbstractIntegration"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Update integration channel",
        "operationId": "putIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AbstractIntegration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Delete integration channel",
        "operationId": "deleteIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AbstractIntegration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/settings/integrations": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "All integration channels",
        "operationId": "getIntegrations",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AbstractIntegration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/settings/integrations/test/{id}": {
      "put": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Test integration channel",
        "operationId": "integrationTest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/settings/objectives": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "All objective",
        "operationId": "getObjectives",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Objective"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/settings/objectives/{objectiveId}": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Objective",
        "operationId": "getObjective",
        "parameters": [
          {
            "name": "objectiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Objective"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Update objective",
        "operationId": "putObjective",
        "parameters": [
          {
            "name": "objectiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Objective"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Delete objective",
        "operationId": "deleteObjective",
        "parameters": [
          {
            "name": "objectiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Objective"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/settings/rules/{ruleId}": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Rule",
        "operationId": "getRule",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rule"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Update rule",
        "operationId": "putRule",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Rule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Delete rule",
        "operationId": "deleteRule",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Rule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/settings/rules/system-rules": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "System rules",
        "operationId": "getSystemRules",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/settings/rules": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "All rules",
        "operationId": "getRules",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/settings/rule-bindings/{ruleBindingId}": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Rule binding",
        "operationId": "getRuleBinding",
        "parameters": [
          {
            "name": "ruleBindingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleBinding"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Update rule binding",
        "operationId": "putRuleBinding",
        "parameters": [
          {
            "name": "ruleBindingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RuleBinding"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Event Settings"
        ],
        "summary": "Delete rule binding",
        "operationId": "deleteRuleBinding",
        "parameters": [
          {
            "name": "ruleBindingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RuleBinding"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/settings/rule-bindings": {
      "get": {
        "tags": [
          "Event Settings"
        ],
        "summary": "All rule bindings",
        "operationId": "getRuleBindings",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RuleBinding"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/infrastructure-monitoring/catalog/metrics/{plugin}": {
      "get": {
        "tags": [
          "Infrastructure Catalog"
        ],
        "summary": "Available metrics",
        "operationId": "getMetricsByPlugin",
        "parameters": [
          {
            "name": "plugin",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricInstance"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/infrastructure-monitoring/catalog/search": {
      "get": {
        "tags": [
          "Infrastructure Catalog"
        ],
        "summary": "Search fields",
        "description": "This endpoints provides a list of available search fields. These search fields can be accessed via lucene queries. Each field belongs to a context, e.g. to entity, trace or event data.",
        "operationId": "getSearchFields",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchFieldResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/infrastructure-monitoring/catalog/plugins": {
      "get": {
        "tags": [
          "Infrastructure Catalog"
        ],
        "summary": "Available Plugins",
        "operationId": "getPlugins",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PluginResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/infrastructure-monitoring/graph/related-hosts/{snapshotId}": {
      "get": {
        "tags": [
          "Infrastructure Resources"
        ],
        "summary": "Related hosts",
        "operationId": "getRelatedHosts",
        "parameters": [
          {
            "name": "snapshotId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/infrastructure-monitoring/graph/views": {
      "get": {
        "tags": [
          "Infrastructure Resources"
        ],
        "summary": "View tree",
        "operationId": "getInfrastructureViewTree",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ViewComponent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/infrastructure-monitoring/metrics": {
      "post": {
        "tags": [
          "Infrastructure Metrics"
        ],
        "summary": "Infrastructure metrics",
        "operationId": "getInfrastructureMetrics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCombinedMetrics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfrastructureMetricResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/infrastructure-monitoring/snapshots": {
      "get": {
        "tags": [
          "Infrastructure Metrics"
        ],
        "summary": "Find snapshots",
        "operationId": "getSnapshots",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "windowSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "matrix",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotResult"
                }
              }
            }
          }
        },
        "description": "These APIs can be used to retrieve information about hosts, processes, JVMs and other entities that we are calling snapshots. A snapshot represents static information about an entity as it was at a specific point in time. To clarify:\r\n**Static information** is any information which is seldom changing, e.g. process IDs, host FQDNs or a list of host hard disks. The counterpart to static information are metrics which have a much higher change rate, e.g. host CPU usage or JVM garbage collection activity. Snapshots only contain static information.\r\n- Snapshots are **versioned** and represent an entity's state for a specific point in time. While snapshots only contain static information, even that information may change. For example you may add another hard disk to a server. For such a change, a new snapshot would be created.\r\n"
      }
    },
    "/api/infrastructure-monitoring/monitoring-state": {
      "get": {
        "tags": [
          "Infrastructure Resources"
        ],
        "summary": "Monitored host count",
        "operationId": "getMonitoringState",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonitoringState"
                }
              }
            }
          }
        }
      }
    },
    "/api/infrastructure-monitoring/software/versions": {
      "get": {
        "tags": [
          "Infrastructure Resources"
        ],
        "summary": "Installed software",
        "description": "Retrieve information about the software you are running. This includes runtime and package manager information.\n\nThe `name`, `version`, `origin` and `type` parameters are optional filters that can be used to reduce the result data set.",
        "operationId": "softwareVersions",
        "parameters": [
          {
            "name": "time",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "origin",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SoftwareVersion"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/instana/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Basic health traffic light",
        "operationId": "getHealthState",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthState"
                }
              }
            }
          }
        },
        "description": "The returned JSON object will provide a health property which contains a simple traffic light (GREEN/YELLO/RED). For any non-Green-state a list \nof reasons will be provided in the messages array.\n\nPossible messages:\n* No data being processed\n* No data arriving from agents\n"
      }
    },
    "/api/instana/usage/api/{month}/{year}": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "API usage month / year",
        "operationId": "getUsageForCustomer",
        "parameters": [
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsageResult"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "CanSeeUsageInformation"
            ]
          }
        ]
      }
    },
    "/api/instana/usage/api": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "API usage by customer",
        "operationId": "getUsageForCustomer_1",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsageResult"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "CanSeeUsageInformation"
            ]
          }
        ]
      }
    },
    "/api/instana/usage/api/{day}/{month}/{year}": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "API usage day / month / year",
        "operationId": "getUsageForCustomerPerDay",
        "parameters": [
          {
            "name": "day",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsageResult"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "CanSeeUsageInformation"
            ]
          }
        ]
      }
    },
    "/api/instana/usage/hosts/{day}/{month}/{year}": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "Host count day / month / year",
        "operationId": "getHostsForCustomer",
        "parameters": [
          {
            "name": "day",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsageResult"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "CanSeeUsageInformation"
            ]
          }
        ]
      }
    },
    "/api/instana/usage/hosts/{month}/{year}": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "Host count month / year",
        "operationId": "getHostsForCustomer_1",
        "parameters": [
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsageResult"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "CanSeeUsageInformation"
            ]
          }
        ]
      }
    },
    "/api/settings/api-tokens/{apiTokenId}": {
      "get": {
        "tags": [
          "API Token"
        ],
        "summary": "API token",
        "operationId": "getApiToken",
        "parameters": [
          {
            "name": "apiTokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiToken"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureApiTokens"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "API Token"
        ],
        "summary": "Update API token",
        "operationId": "putApiToken",
        "parameters": [
          {
            "name": "apiTokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ApiToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureApiTokens"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "API Token"
        ],
        "summary": "Delete API token",
        "operationId": "deleteApiToken",
        "parameters": [
          {
            "name": "apiTokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureApiTokens"
            ]
          }
        ]
      }
    },
    "/api/settings/api-tokens": {
      "get": {
        "tags": [
          "API Token"
        ],
        "summary": "All API tokes",
        "operationId": "getApiTokens",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiToken"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureApiTokens"
            ]
          }
        ]
      }
    },
    "/api/settings/auditlog": {
      "get": {
        "tags": [
          "Audit Log"
        ],
        "summary": "Audit log",
        "operationId": "getAuditLogs",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLogResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ViewAuditLog"
            ]
          }
        ]
      }
    },
    "/api/settings/maintenance": {
      "get": {
        "tags": [
          "Maintenance Configuration"
        ],
        "summary": "All Maintenance configurations",
        "operationId": "getMaintenanceConfigs",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MaintenanceConfig"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureCustomAlerts"
            ]
          }
        ]
      }
    },
    "/api/settings/maintenance/{id}": {
      "get": {
        "tags": [
          "Maintenance Configuration"
        ],
        "summary": "Maintenance configuration",
        "operationId": "getMaintenanceConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureCustomAlerts"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Maintenance Configuration"
        ],
        "summary": "Update maintenance",
        "operationId": "putMaintenanceConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureCustomAlerts"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Maintenance Configuration"
        ],
        "summary": "Delete maintenance",
        "operationId": "deleteMaintenanceConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureCustomAlerts"
            ]
          }
        ]
      }
    },
    "/api/settings/maintenance/schedule/{id}": {
      "put": {
        "tags": [
          "Maintenance Configuration"
        ],
        "summary": "Schedule maintenance",
        "operationId": "scheduleMaintenanceConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureCustomAlerts"
            ]
          }
        ]
      }
    },
    "/api/settings/maintenance/unschedule/{id}": {
      "put": {
        "tags": [
          "Maintenance Configuration"
        ],
        "summary": "Unschedule maintenance",
        "operationId": "unscheduleMaintenanceConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureCustomAlerts"
            ]
          }
        ]
      }
    },
    "/api/settings/roles/{roleId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Role",
        "operationId": "getRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureRoles"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update role",
        "operationId": "putRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Rule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureRoles"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete role",
        "operationId": "deleteRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureRoles"
            ]
          }
        ]
      }
    },
    "/api/settings/roles": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "All roles",
        "operationId": "getRoles",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureRoles"
            ]
          }
        ]
      }
    },
    "/api/settings/synthetic-calls": {
      "get": {
        "tags": [
          "Synthetic Calls"
        ],
        "summary": "Synthetic call configurations",
        "operationId": "getSyntheticCalls",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SyntheticCallConfig"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Synthetic Calls"
        ],
        "summary": "Update synthetic call configurations",
        "operationId": "updateSyntheticCall",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SyntheticCallConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Synthetic Calls"
        ],
        "summary": "Delete synthetic call configurations",
        "operationId": "deleteSyntheticCall",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureServiceMapping"
            ]
          }
        ]
      }
    },
    "/api/settings/users/overview": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "All tenant user",
        "operationId": "getUsersIncludingInvitations",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureUsers"
            ]
          }
        ]
      }
    },
    "/api/settings/users/{userId}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove user from tenant",
        "operationId": "removeUserFromTenant",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureUsers"
            ]
          }
        ]
      }
    },
    "/api/settings/users/invitations": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Send user invitation",
        "operationId": "sendInvitation",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureUsers"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Revoke pending user invitation",
        "operationId": "revokePendingInvitations",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureUsers"
            ]
          }
        ]
      }
    },
    "/api/settings/users/{userId}/role": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Add user to role",
        "operationId": "setRole",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "ConfigureUsers"
            ]
          }
        ]
      }
    },
    "/api/website-monitoring/analyze/beacon-groups": {
      "post": {
        "tags": [
          "Website Analyze"
        ],
        "summary": "Beacon group metrics",
        "operationId": "getBeaconGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetWebsiteBeaconGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeaconGroupsResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/website-monitoring/analyze/beacons": {
      "post": {
        "tags": [
          "Website Analyze"
        ],
        "summary": "Beacons",
        "operationId": "getBeacons",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetWebsiteBeacons"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeaconResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/website-monitoring/catalog/metrics": {
      "get": {
        "tags": [
          "Website Catalog"
        ],
        "summary": "Metric descriptions",
        "operationId": "getMetricDefinitions_1",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricDescription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/website-monitoring/catalog/tags": {
      "get": {
        "tags": [
          "Website Catalog"
        ],
        "summary": "Tag catalog",
        "operationId": "getTagsForWeb",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/website-monitoring/metrics": {
      "post": {
        "tags": [
          "Website Metrics"
        ],
        "summary": "Beacons metrics",
        "operationId": "getBeaconMetrics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetWebsiteMetrics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebsiteMetricResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/website-monitoring/page-load": {
      "get": {
        "tags": [
          "Website Metrics"
        ],
        "summary": "Page load",
        "operationId": "getPageLoad",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "matrix",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "path",
            "required": true,
            "style": "matrix",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Missing page id"
          },
          "404": {
            "description": "Website not found"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebsiteMonitoringBeacon"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "IngestionOffsetCursor": {
        "type": "object",
        "properties": {
          "ingestionTime": {
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TraceGroupsItem": {
        "required": [
          "cursor",
          "metrics"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "timestamp": {
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "cursor": {
            "$ref": "#/components/schemas/IngestionOffsetCursor"
          },
          "metrics": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "TraceGroupsResult": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TraceGroupsItem"
            }
          },
          "canLoadMore": {
            "type": "boolean"
          },
          "totalHits": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "totalRepresentedItemCount": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CursorPagination": {
        "type": "object",
        "properties": {
          "retrievalSize": {
            "maximum": 200,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "ingestionTime": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetTraceGroups": {
        "required": [
          "group"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/CursorPagination"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrame"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          },
          "tagFilters": {
            "maxItems": 32,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagFilter"
            }
          },
          "metrics": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricConfiguration"
            }
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "groupbyTag": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "groupbyTagSecondLevelKey": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "MetricConfiguration": {
        "required": [
          "aggregation"
        ],
        "type": "object",
        "properties": {
          "metric": {
            "type": "string"
          },
          "granularity": {
            "type": "integer",
            "format": "int32"
          },
          "aggregation": {
            "type": "string",
            "enum": [
              "SUM",
              "MEAN",
              "MAX",
              "MIN",
              "P25",
              "P50",
              "P75",
              "P90",
              "P95",
              "P98",
              "P99",
              "DISTINCT_COUNT"
            ]
          }
        }
      },
      "Order": {
        "required": [
          "by",
          "direction"
        ],
        "type": "object",
        "properties": {
          "by": {
            "type": "string"
          },
          "direction": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ]
          }
        }
      },
      "TagFilter": {
        "required": [
          "operator",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "operator": {
            "type": "string",
            "enum": [
              "EQUALS",
              "CONTAINS",
              "LESS_THAN",
              "GREATER_THAN",
              "NOT_EMPTY",
              "NOT_EQUAL",
              "NOT_CONTAIN",
              "IS_EMPTY"
            ]
          }
        }
      },
      "TimeFrame": {
        "type": "object",
        "properties": {
          "windowSize": {
            "maximum": 2678400000,
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Endpoint": {
        "required": [
          "technologies",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "UNDEFINED",
              "RPC",
              "BATCH",
              "HTTP",
              "DATABASE",
              "MESSAGING",
              "PAGE",
              "PAGE_RESOURCE"
            ]
          },
          "serviceId": {
            "type": "string"
          },
          "technologies": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isSynthetic": {
            "type": "boolean",
            "writeOnly": true
          },
          "synthetic": {
            "type": "boolean"
          }
        }
      },
      "Service": {
        "required": [
          "technologies",
          "types"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNDEFINED",
                "RPC",
                "BATCH",
                "HTTP",
                "DATABASE",
                "MESSAGING",
                "PAGE",
                "PAGE_RESOURCE"
              ]
            }
          },
          "technologies": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Trace": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "startTime": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "duration": {
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "erroneous": {
            "type": "boolean"
          },
          "service": {
            "$ref": "#/components/schemas/Service"
          },
          "endpoint": {
            "$ref": "#/components/schemas/Endpoint"
          }
        }
      },
      "TraceItem": {
        "required": [
          "cursor",
          "trace"
        ],
        "type": "object",
        "properties": {
          "trace": {
            "$ref": "#/components/schemas/Trace"
          },
          "cursor": {
            "$ref": "#/components/schemas/IngestionOffsetCursor"
          }
        }
      },
      "TraceResult": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TraceItem"
            }
          },
          "canLoadMore": {
            "type": "boolean"
          },
          "totalHits": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "totalRepresentedItemCount": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetTraces": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/CursorPagination"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrame"
          },
          "tagFilters": {
            "maxItems": 32,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagFilter"
            }
          }
        }
      },
      "CallGroupsItem": {
        "required": [
          "cursor",
          "metrics"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "timestamp": {
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "cursor": {
            "$ref": "#/components/schemas/IngestionOffsetCursor"
          },
          "metrics": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "CallGroupsResult": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallGroupsItem"
            }
          },
          "canLoadMore": {
            "type": "boolean"
          },
          "totalHits": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "totalRepresentedItemCount": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetCallGroups": {
        "required": [
          "group"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/CursorPagination"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrame"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          },
          "tagFilters": {
            "maxItems": 10,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagFilter"
            }
          },
          "metrics": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricConfiguration"
            }
          }
        }
      },
      "Application": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "FullTrace": {
        "required": [
          "rootSpan"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "totalErrorCount": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "rootSpan": {
            "$ref": "#/components/schemas/Span"
          }
        }
      },
      "PhysicalContext": {
        "type": "object",
        "properties": {
          "process": {
            "$ref": "#/components/schemas/SnapshotPreview"
          },
          "container": {
            "$ref": "#/components/schemas/SnapshotPreview"
          },
          "host": {
            "$ref": "#/components/schemas/SnapshotPreview"
          },
          "zone": {
            "$ref": "#/components/schemas/SnapshotPreview"
          },
          "cluster": {
            "$ref": "#/components/schemas/SnapshotPreview"
          }
        }
      },
      "SnapshotPreview": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "time": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "label": {
            "type": "string"
          },
          "plugin": {
            "type": "string"
          }
        }
      },
      "Span": {
        "required": [
          "childSpans",
          "data",
          "kind",
          "stackTrace"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "start": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "duration": {
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "errorCount": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "batchSize": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "batchSelfTime": {
            "type": "integer",
            "format": "int64"
          },
          "kind": {
            "type": "string",
            "enum": [
              "ENTRY",
              "EXIT",
              "INTERMEDIATE"
            ]
          },
          "source": {
            "$ref": "#/components/schemas/SpanRelation"
          },
          "destination": {
            "$ref": "#/components/schemas/SpanRelation"
          },
          "stackTrace": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StackTraceItem"
            }
          },
          "childSpans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Span"
            }
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "SpanRelation": {
        "required": [
          "applications"
        ],
        "type": "object",
        "properties": {
          "applications": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Application"
            }
          },
          "service": {
            "$ref": "#/components/schemas/Service"
          },
          "endpoint": {
            "$ref": "#/components/schemas/Endpoint"
          },
          "physicalContext": {
            "$ref": "#/components/schemas/PhysicalContext"
          }
        }
      },
      "StackTraceItem": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "line": {
            "type": "string"
          }
        }
      },
      "ApplicationItem": {
        "required": [
          "application",
          "metrics"
        ],
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/Application"
          },
          "metrics": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "ApplicationMetricResult": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationItem"
            }
          },
          "page": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "totalHits": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AppDataMetricConfiguration": {
        "required": [
          "aggregation"
        ],
        "type": "object",
        "properties": {
          "metric": {
            "type": "string"
          },
          "granularity": {
            "type": "integer",
            "format": "int32"
          },
          "aggregation": {
            "type": "string",
            "enum": [
              "SUM",
              "MEAN",
              "MAX",
              "MIN",
              "P25",
              "P50",
              "P75",
              "P90",
              "P95",
              "P98",
              "P99",
              "DISTINCT_COUNT"
            ]
          }
        }
      },
      "GetApplications": {
        "required": [
          "metrics"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrame"
          },
          "metrics": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppDataMetricConfiguration"
            }
          },
          "nameFilter": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "applicationId": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "serviceId": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "endpointId": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "endpointTypes": {
            "maxItems": 8,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNDEFINED",
                "RPC",
                "BATCH",
                "HTTP",
                "DATABASE",
                "MESSAGING",
                "PAGE",
                "PAGE_RESOURCE"
              ]
            }
          },
          "technologies": {
            "maxItems": 20,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "maximum": 200,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ServiceItem": {
        "required": [
          "metrics",
          "service"
        ],
        "type": "object",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/Service"
          },
          "metrics": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "ServiceMetricResult": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceItem"
            }
          },
          "page": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "totalHits": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetServices": {
        "required": [
          "metrics"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrame"
          },
          "metrics": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppDataMetricConfiguration"
            }
          },
          "nameFilter": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "applicationId": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "serviceId": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "endpointId": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "endpointTypes": {
            "maxItems": 8,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNDEFINED",
                "RPC",
                "BATCH",
                "HTTP",
                "DATABASE",
                "MESSAGING",
                "PAGE",
                "PAGE_RESOURCE"
              ]
            }
          },
          "technologies": {
            "maxItems": 20,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EndpointItem": {
        "required": [
          "endpoint",
          "metrics"
        ],
        "type": "object",
        "properties": {
          "endpoint": {
            "$ref": "#/components/schemas/Endpoint"
          },
          "metrics": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "EndpointMetricResult": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointItem"
            }
          },
          "page": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "totalHits": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetEndpoints": {
        "required": [
          "metrics"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrame"
          },
          "metrics": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppDataMetricConfiguration"
            }
          },
          "nameFilter": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "applicationId": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "serviceId": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "endpointId": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "endpointTypes": {
            "maxItems": 8,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNDEFINED",
                "RPC",
                "BATCH",
                "HTTP",
                "DATABASE",
                "MESSAGING",
                "PAGE",
                "PAGE_RESOURCE"
              ]
            }
          },
          "technologies": {
            "maxItems": 20,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApplicationResult": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Application"
            }
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalHits": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EndpointResult": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalHits": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ServiceResult": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalHits": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MetricDescription": {
        "type": "object",
        "properties": {
          "metricId": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "formatter": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "aggregations": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STRING",
              "NUMBER",
              "BOOLEAN",
              "KEY_VALUE_PAIR"
            ]
          },
          "category": {
            "type": "string"
          }
        }
      },
      "ApplicationConfig": {
        "required": [
          "matchSpecification"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "label": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "matchSpecification": {
            "$ref": "#/components/schemas/MatchExpressionDTO"
          }
        }
      },
      "BinaryOperatorDTO": {
        "required": [
          "conjunction",
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/MatchExpressionDTO"
          },
          "right": {
            "$ref": "#/components/schemas/MatchExpressionDTO"
          },
          "conjunction": {
            "type": "string",
            "enum": [
              "AND",
              "OR"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/MatchExpressionDTO"
          }
        ]
      },
      "MatchExpressionDTO": {
        "type": "object",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TagMatcherDTO": {
        "required": [
          "operator"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "operator": {
            "type": "string",
            "enum": [
              "EQUALS",
              "NOT_EQUAL",
              "CONTAINS",
              "NOT_CONTAIN",
              "NOT_EMPTY"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/MatchExpressionDTO"
          }
        ]
      },
      "FixedHttpPathSegmentMatchingRule": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/HttpPathSegmentMatchingRule"
          }
        ]
      },
      "HttpEndpointConfig": {
        "required": [
          "rules"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "string"
          },
          "endpointNameByFirstPathSegmentRuleEnabled": {
            "type": "boolean"
          },
          "endpointNameByCollectedPathTemplateRuleEnabled": {
            "type": "boolean"
          },
          "rules": {
            "maxItems": 500,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HttpEndpointRule"
            }
          }
        }
      },
      "HttpEndpointRule": {
        "required": [
          "pathSegments"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "pathSegments": {
            "maxItems": 16,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HttpPathSegmentMatchingRule"
            }
          },
          "testCases": {
            "maxItems": 32,
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "HttpPathSegmentMatchingRule": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UNSUPPORTED",
              "FIXED",
              "PARAMETER",
              "MATCH_ALL"
            ]
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "MatchAllHttpPathSegmentMatchingRule": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/HttpPathSegmentMatchingRule"
          }
        ]
      },
      "PathParameterHttpPathSegmentMatchingRule": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/HttpPathSegmentMatchingRule"
          }
        ]
      },
      "UnsupportedHttpPathSegmentMatchingRule": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "unsupportedType": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/HttpPathSegmentMatchingRule"
          }
        ]
      },
      "ServiceConfig": {
        "required": [
          "enabled",
          "matchSpecification"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "comment": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "matchSpecification": {
            "maxItems": 20,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceMatchingRule"
            }
          }
        }
      },
      "ServiceMatchingRule": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "AbstractAlertRule": {
        "type": "object",
        "properties": {
          "ruleType": {
            "type": "string"
          }
        }
      },
      "AlertEvent": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "triggering": {
            "type": "boolean"
          },
          "severity": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "expirationTime": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AlertMatch": {
        "required": [
          "entityType",
          "metricName"
        ],
        "type": "object",
        "properties": {
          "entityType": {
            "type": "string"
          },
          "metricName": {
            "type": "string"
          },
          "rollup": {
            "type": "integer",
            "format": "int64"
          },
          "query": {
            "type": "string"
          },
          "queryEvaluationTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "excludedSnapshotIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AnomalyAlert": {
        "required": [
          "event",
          "match",
          "name",
          "rule"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "match": {
            "$ref": "#/components/schemas/AlertMatch"
          },
          "rule": {
            "$ref": "#/components/schemas/AbstractAlertRule"
          },
          "event": {
            "$ref": "#/components/schemas/AlertEvent"
          },
          "lastUpdated": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AnomalyAlertRule": {
        "required": [
          "sensitivity"
        ],
        "type": "object",
        "properties": {
          "sensitivity": {
            "type": "integer",
            "format": "int32"
          },
          "violationDirection": {
            "type": "string",
            "enum": [
              "EITHER",
              "UPPER",
              "LOWER"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractAlertRule"
          }
        ]
      },
      "ThresholdAlertRule": {
        "required": [
          "aggregation",
          "conditionOperator"
        ],
        "type": "object",
        "properties": {
          "window": {
            "type": "integer",
            "format": "int64"
          },
          "aggregation": {
            "type": "string"
          },
          "conditionOperator": {
            "type": "string"
          },
          "conditionValue": {
            "type": "number",
            "format": "double"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractAlertRule"
          }
        ]
      },
      "EventResult": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string"
          },
          "start": {
            "type": "integer",
            "format": "int64"
          },
          "end": {
            "type": "integer",
            "format": "int64"
          },
          "problem": {
            "type": "string"
          },
          "fixSuggestion": {
            "type": "string"
          },
          "severity": {
            "type": "integer",
            "format": "int32"
          },
          "snapshotId": {
            "type": "string"
          },
          "affectedServiceSnapshotId": {
            "type": "string"
          },
          "metrics": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "recentEvents": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      },
      "AlertingConfiguration": {
        "required": [
          "alertName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "alertName": {
            "type": "string"
          },
          "muteUntil": {
            "type": "integer",
            "format": "int64"
          },
          "integrationIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "eventFilteringConfiguration": {
            "$ref": "#/components/schemas/EventFilteringConfiguration"
          }
        }
      },
      "EventFilteringConfiguration": {
        "required": [
          "eventQuery",
          "eventTypes",
          "query",
          "ruleIds"
        ],
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "eventQuery": {
            "type": "string"
          },
          "ruleIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "eventTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BuiltInRuleSpecification": {
        "required": [
          "hyperParams",
          "ruleInputs"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string"
          },
          "shortPluginId": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string"
          },
          "hyperParams": {
            "maxItems": 32,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HyperParam"
            }
          },
          "ruleInputs": {
            "maxItems": 32,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleInput"
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "lastUpdated": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "HyperParam": {
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string"
          },
          "defaultValue": {
            "type": "number",
            "format": "double"
          },
          "minValue": {
            "type": "number",
            "format": "double"
          },
          "maxValue": {
            "type": "number",
            "format": "double"
          },
          "valueFormat": {
            "type": "string",
            "enum": [
              "NUMBER",
              "BYTES",
              "PERCENTAGE",
              "MILLIS",
              "SECONDS",
              "MICROS",
              "RATE",
              "BYTE_RATE",
              "UNDEFINED"
            ]
          }
        }
      },
      "RuleInput": {
        "required": [
          "inputKind"
        ],
        "type": "object",
        "properties": {
          "inputKind": {
            "type": "string",
            "enum": [
              "METRIC",
              "SNAPSHOT_FIELD",
              "EVENT",
              "DERIVED_METRIC",
              "METRIC_PATTERN"
            ]
          },
          "inputName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "HealthRule": {
        "required": [
          "description",
          "plugin"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string"
          },
          "plugin": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "AbstractIntegration": {
        "required": [
          "kind",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "EmailIntegration": {
        "required": [
          "emails",
          "kind",
          "name"
        ],
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractIntegration"
          }
        ]
      },
      "GoogleChatIntegration": {
        "required": [
          "kind",
          "name"
        ],
        "type": "object",
        "properties": {
          "webhookUrl": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractIntegration"
          }
        ]
      },
      "Office365Integration": {
        "required": [
          "kind",
          "name"
        ],
        "type": "object",
        "properties": {
          "webhookUrl": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractIntegration"
          }
        ]
      },
      "OpsgenieIntegration": {
        "required": [
          "kind",
          "name",
          "region"
        ],
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "region": {
            "type": "string",
            "enum": [
              "US",
              "EU"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractIntegration"
          }
        ]
      },
      "PagerdutyIntegration": {
        "required": [
          "kind",
          "name"
        ],
        "type": "object",
        "properties": {
          "serviceIntegrationKey": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractIntegration"
          }
        ]
      },
      "SlackIntegration": {
        "required": [
          "kind",
          "name"
        ],
        "type": "object",
        "properties": {
          "webhookUrl": {
            "type": "string"
          },
          "iconUrl": {
            "type": "string"
          },
          "channel": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractIntegration"
          }
        ]
      },
      "SplunkIntegration": {
        "required": [
          "kind",
          "name"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractIntegration"
          }
        ]
      },
      "WebhookIntegration": {
        "required": [
          "kind",
          "name",
          "webhookUrls"
        ],
        "type": "object",
        "properties": {
          "webhookUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractIntegration"
          }
        ]
      },
      "Objective": {
        "required": [
          "match",
          "name",
          "rule"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "match": {
            "$ref": "#/components/schemas/ObjectiveMatch"
          },
          "rule": {
            "$ref": "#/components/schemas/ObjectiveRule"
          },
          "lastUpdated": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ObjectiveMatch": {
        "required": [
          "filteringQuery",
          "timePattern",
          "timeZoneId"
        ],
        "type": "object",
        "properties": {
          "filteringQuery": {
            "type": "string"
          },
          "timePattern": {
            "type": "string"
          },
          "allowedIssueTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timeZoneId": {
            "type": "string"
          }
        }
      },
      "ObjectiveRule": {
        "required": [
          "reductionOperation",
          "thresholds"
        ],
        "type": "object",
        "properties": {
          "reductionOperation": {
            "type": "string"
          },
          "thresholds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectiveThreshold"
            }
          }
        }
      },
      "ObjectiveThreshold": {
        "required": [
          "message",
          "severity",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int64"
          },
          "severity": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Rule": {
        "required": [
          "conditionOperator",
          "entityType",
          "metricName",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "entityType": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "metricName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "rollup": {
            "type": "integer",
            "format": "int64"
          },
          "window": {
            "type": "integer",
            "format": "int64"
          },
          "aggregation": {
            "type": "string"
          },
          "conditionOperator": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string"
          },
          "conditionValue": {
            "type": "number",
            "format": "double"
          },
          "deprecated": {
            "type": "boolean"
          },
          "lastUpdated": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RuleBinding": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "triggering": {
            "type": "boolean"
          },
          "severity": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string"
          },
          "expirationTime": {
            "minimum": 2,
            "type": "integer",
            "format": "int64"
          },
          "query": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string"
          },
          "ruleIds": {
            "maxItems": 16,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "twoZeroModeEnabled": {
            "type": "boolean"
          },
          "lastUpdated": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "MetricInstance": {
        "required": [
          "formatter"
        ],
        "type": "object",
        "properties": {
          "formatter": {
            "type": "string",
            "enum": [
              "NUMBER",
              "BYTES",
              "PERCENTAGE",
              "MILLIS",
              "SECONDS",
              "MICROS",
              "RATE",
              "BYTE_RATE",
              "UNDEFINED"
            ]
          },
          "label": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "metricId": {
            "type": "string"
          },
          "pluginId": {
            "type": "string"
          },
          "custom": {
            "type": "boolean"
          }
        }
      },
      "SearchFieldResult": {
        "type": "object",
        "properties": {
          "keyword": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "termType": {
            "type": "string"
          },
          "fixedValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PluginResult": {
        "type": "object",
        "properties": {
          "plugin": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "Connection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "otherId": {
            "type": "string"
          },
          "bidirectional": {
            "type": "boolean"
          }
        }
      },
      "ViewComponent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "children": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewComponent"
            }
          },
          "outgoingConnections": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connection"
            }
          },
          "incomingConnections": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connection"
            }
          }
        }
      },
      "InfrastructureMetricResult": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricItem"
            }
          }
        }
      },
      "MetricItem": {
        "type": "object",
        "properties": {
          "snapshotId": {
            "type": "string"
          },
          "plugin": {
            "type": "string"
          },
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "label": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "metrics": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "GetCombinedMetrics": {
        "required": [
          "metrics",
          "plugin"
        ],
        "type": "object",
        "properties": {
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrame"
          },
          "plugin": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "snapshotIds": {
            "maxItems": 30,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rollup": {
            "type": "integer",
            "format": "int32"
          },
          "metrics": {
            "maxItems": 5,
            "minItems": 1,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SnapshotItem": {
        "type": "object",
        "properties": {
          "snapshotId": {
            "type": "string"
          },
          "plugin": {
            "type": "string"
          },
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "label": {
            "type": "string"
          },
          "host": {
            "type": "string"
          }
        }
      },
      "SnapshotResult": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SnapshotItem"
            }
          }
        }
      },
      "MonitoringState": {
        "type": "object",
        "properties": {
          "hostCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SoftwareUser": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "container": {
            "type": "string"
          },
          "process": {
            "type": "string"
          }
        }
      },
      "SoftwareVersion": {
        "required": [
          "origin",
          "usedBy"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "usedBy": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SoftwareUser"
            }
          }
        }
      },
      "HealthState": {
        "type": "object",
        "properties": {
          "health": {
            "type": "string",
            "enum": [
              "RED",
              "YELLOW",
              "GREEN"
            ]
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UsageResult": {
        "type": "object",
        "properties": {
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsageResultItems"
            }
          }
        }
      },
      "UsageResultItems": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "sims": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "canConfigureServiceMapping": {
            "type": "boolean"
          },
          "canConfigureEumApplications": {
            "type": "boolean"
          },
          "canConfigureUsers": {
            "type": "boolean"
          },
          "canInstallNewAgents": {
            "type": "boolean"
          },
          "canSeeUsageInformation": {
            "type": "boolean"
          },
          "canConfigureIntegrations": {
            "type": "boolean"
          },
          "canSeeOnPremLicenseInformation": {
            "type": "boolean"
          },
          "canConfigureRoles": {
            "type": "boolean"
          },
          "canConfigureCustomAlerts": {
            "type": "boolean"
          },
          "canConfigureApiTokens": {
            "type": "boolean"
          },
          "canConfigureAgentRunMode": {
            "type": "boolean"
          },
          "canViewAuditLog": {
            "type": "boolean"
          },
          "canConfigureObjectives": {
            "type": "boolean"
          },
          "canConfigureAgents": {
            "type": "boolean"
          },
          "canConfigureAuthenticationMethods": {
            "type": "boolean"
          },
          "canConfigureApplications": {
            "type": "boolean"
          }
        }
      },
      "AuditLogEntry": {
        "required": [
          "actor",
          "meta"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "actor": {
            "$ref": "#/components/schemas/LogEntryActor"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "AuditLogResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditLogEntry"
            }
          }
        }
      },
      "LogEntryActor": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "USER",
              "API_TOKEN"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "MaintenanceConfig": {
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "query": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string"
          },
          "windows": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaintenanceWindow"
            }
          },
          "lastUpdated": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "MaintenanceWindow": {
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "start": {
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "end": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Role": {
        "required": [
          "implicitViewFilter"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "implicitViewFilter": {
            "type": "string"
          },
          "canConfigureServiceMapping": {
            "type": "boolean"
          },
          "canConfigureEumApplications": {
            "type": "boolean"
          },
          "canConfigureUsers": {
            "type": "boolean"
          },
          "canInstallNewAgents": {
            "type": "boolean"
          },
          "canSeeUsageInformation": {
            "type": "boolean"
          },
          "canConfigureIntegrations": {
            "type": "boolean"
          },
          "canSeeOnPremLicenseInformation": {
            "type": "boolean"
          },
          "canConfigureRoles": {
            "type": "boolean"
          },
          "canConfigureCustomAlerts": {
            "type": "boolean"
          },
          "canConfigureApiTokens": {
            "type": "boolean"
          },
          "canConfigureAgentRunMode": {
            "type": "boolean"
          },
          "canViewAuditLog": {
            "type": "boolean"
          },
          "canConfigureObjectives": {
            "type": "boolean"
          },
          "canConfigureAgents": {
            "type": "boolean"
          },
          "canConfigureAuthenticationMethods": {
            "type": "boolean"
          },
          "canConfigureApplications": {
            "type": "boolean"
          }
        }
      },
      "SyntheticCallConfig": {
        "required": [
          "customRules"
        ],
        "type": "object",
        "properties": {
          "defaultRulesEnabled": {
            "type": "boolean"
          },
          "customRules": {
            "maxItems": 500,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyntheticCallRule"
            }
          }
        }
      },
      "SyntheticCallRule": {
        "required": [
          "matchSpecification"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string"
          },
          "matchSpecification": {
            "$ref": "#/components/schemas/MatchExpressionDTO"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "SAMLProvider": {
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string"
          },
          "idpMetaData": {
            "type": "string"
          }
        }
      },
      "SSOProvider": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          }
        }
      },
      "Tenant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tenantKey": {
            "type": "string"
          },
          "createDate": {
            "type": "integer",
            "format": "int64",
            "writeOnly": true
          },
          "onPremise": {
            "type": "boolean"
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "ssoProvider": {
            "uniqueItems": true,
            "type": "array",
            "writeOnly": true,
            "items": {
              "$ref": "#/components/schemas/SSOProvider"
            }
          },
          "samlProvider": {
            "$ref": "#/components/schemas/SAMLProvider"
          },
          "createdDate": {
            "type": "integer",
            "format": "int64"
          },
          "ssoProviders": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SSOProvider"
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "preferredName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "encryptedPassword": {
            "type": "string"
          },
          "lastLoggedIn": {
            "type": "integer",
            "format": "int64"
          },
          "timestampAcceptedTos": {
            "type": "integer",
            "format": "int64"
          },
          "timestampAcceptedPrivacyAgreement": {
            "type": "integer",
            "format": "int64"
          },
          "acceptedTosVersion": {
            "type": "integer",
            "format": "int64"
          },
          "acceptedPrivacyAgreementVersion": {
            "type": "integer",
            "format": "int64"
          },
          "tenantsWhereMainContact": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tenants": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tenant"
            }
          },
          "roles": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createDate": {
            "type": "integer",
            "format": "int64"
          },
          "emailConfirmed": {
            "type": "boolean"
          }
        }
      },
      "BeaconGroupsResult": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebsiteBeaconGroupsItem"
            }
          },
          "canLoadMore": {
            "type": "boolean"
          },
          "totalHits": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "totalRepresentedItemCount": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "WebsiteBeaconGroupsItem": {
        "required": [
          "cursor",
          "metrics"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "earliestTimestamp": {
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "cursor": {
            "$ref": "#/components/schemas/IngestionOffsetCursor"
          },
          "metrics": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "GetWebsiteBeaconGroups": {
        "required": [
          "group",
          "type"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/CursorPagination"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrame"
          },
          "group": {
            "$ref": "#/components/schemas/WebsiteBeaconTagGroup"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "type": {
            "type": "string",
            "enum": [
              "PAGELOAD",
              "RESOURCELOAD",
              "HTTPREQUEST",
              "ERROR"
            ]
          },
          "tagFilters": {
            "maxItems": 32,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagFilter"
            }
          },
          "metrics": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebsiteMonitoringMetricsConfiguration"
            }
          }
        }
      },
      "WebsiteBeaconTagGroup": {
        "type": "object",
        "properties": {
          "groupbyTag": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "groupbyTagSecondLevelKey": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "WebsiteMonitoringMetricsConfiguration": {
        "required": [
          "aggregation"
        ],
        "type": "object",
        "properties": {
          "metric": {
            "type": "string"
          },
          "granularity": {
            "type": "integer",
            "format": "int32"
          },
          "aggregation": {
            "type": "string",
            "enum": [
              "SUM",
              "MEAN",
              "MAX",
              "MIN",
              "P25",
              "P50",
              "P75",
              "P90",
              "P95",
              "P98",
              "P99",
              "DISTINCT_COUNT"
            ]
          }
        }
      },
      "BeaconResult": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebsiteBeaconsItem"
            }
          },
          "canLoadMore": {
            "type": "boolean"
          },
          "totalHits": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "totalRepresentedItemCount": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "WebsiteBeaconsItem": {
        "required": [
          "beacon",
          "cursor"
        ],
        "type": "object",
        "properties": {
          "beacon": {
            "$ref": "#/components/schemas/WebsiteMonitoringBeacon"
          },
          "cursor": {
            "$ref": "#/components/schemas/IngestionOffsetCursor"
          }
        }
      },
      "WebsiteMonitoringBeacon": {
        "type": "object",
        "properties": {
          "websiteId": {
            "type": "string"
          },
          "websiteLabel": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "phase": {
            "type": "string"
          },
          "timestamp": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "duration": {
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "batchSize": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "accurateTimingsAvailable": {
            "type": "boolean"
          },
          "deprecations": {
            "maxItems": 16,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pageLoadId": {
            "type": "string"
          },
          "beaconId": {
            "type": "string"
          },
          "backendTraceId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "customEventName": {
            "type": "string"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "locationUrl": {
            "type": "string"
          },
          "locationOrigin": {
            "type": "string"
          },
          "locationPath": {
            "type": "string"
          },
          "errorCount": {
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "errorMessage": {
            "type": "string"
          },
          "errorId": {
            "type": "string"
          },
          "errorType": {
            "type": "string"
          },
          "stackTrace": {
            "type": "string"
          },
          "componentStack": {
            "type": "string"
          },
          "userIp": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "userEmail": {
            "type": "string"
          },
          "userLanguages": {
            "maxItems": 5,
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deviceType": {
            "type": "string"
          },
          "browserName": {
            "type": "string"
          },
          "browserVersion": {
            "type": "string"
          },
          "osName": {
            "type": "string"
          },
          "osVersion": {
            "type": "string"
          },
          "windowHidden": {
            "type": "boolean"
          },
          "windowWidth": {
            "minimum": -1,
            "type": "integer",
            "format": "int32"
          },
          "windowHeight": {
            "minimum": -1,
            "type": "integer",
            "format": "int32"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "accuracyRadius": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "city": {
            "type": "string"
          },
          "subdivision": {
            "type": "string"
          },
          "subdivisionCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "continent": {
            "type": "string"
          },
          "continentCode": {
            "type": "string"
          },
          "httpCallUrl": {
            "type": "string"
          },
          "httpCallOrigin": {
            "type": "string"
          },
          "httpCallPath": {
            "type": "string"
          },
          "httpCallMethod": {
            "type": "string"
          },
          "httpCallStatus": {
            "maximum": 599,
            "minimum": -1,
            "type": "integer",
            "format": "int32"
          },
          "httpCallCorrelationAttempted": {
            "type": "boolean"
          },
          "httpCallAsynchronous": {
            "type": "boolean"
          },
          "initiator": {
            "type": "string"
          },
          "resourceType": {
            "type": "string"
          },
          "cacheInteraction": {
            "type": "string"
          },
          "encodedBodySize": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "decodedBodySize": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "transferSize": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "unloadTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "redirectTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "appCacheTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "dnsTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "tcpTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "sslTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "requestTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "responseTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "processingTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "onLoadTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "backendTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "frontendTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "domTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "childrenTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "firstPaintTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          },
          "firstContentfulPaintTime": {
            "minimum": -1,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetWebsiteBeacons": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/CursorPagination"
          },
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrame"
          },
          "type": {
            "type": "string",
            "enum": [
              "PAGELOAD",
              "RESOURCELOAD",
              "HTTPREQUEST",
              "ERROR"
            ]
          },
          "tagFilters": {
            "maxItems": 32,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagFilter"
            }
          }
        }
      },
      "WebsiteMetricResult": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        }
      },
      "GetWebsiteMetrics": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "timeFrame": {
            "$ref": "#/components/schemas/TimeFrame"
          },
          "metrics": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebsiteMonitoringMetricsConfiguration"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "PAGELOAD",
              "RESOURCELOAD",
              "HTTPREQUEST",
              "ERROR"
            ]
          },
          "tagFilters": {
            "maxItems": 32,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagFilter"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "description": "In order to use the REST API, you need to create an API token and assign permissions to it. API tokens are managed only by the account owner role, who can create multiple API tokens with varying permissions. API token management can found in Settings â Access Control â API Tokens.",
        "name": "apiToken",
        "in": "header"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Infrastructure Monitoring",
      "tags": [
        "Infrastructure Metrics",
        "Infrastructure Resources",
        "Infrastructure Catalog"
      ]
    },
    {
      "name": "Application Monitoring",
      "tags": [
        "Application Metrics",
        "Application Resources",
        "Application Catalog",
        "Application Analyze",
        "Application Settings"
      ]
    },
    {
      "name": "Website Monitoring",
      "tags": [
        "Website Metrics",
        "Website Catalog",
        "Website Analyze"
      ]
    },
    {
      "name": "Event",
      "tags": [
        "Alerts",
        "Events",
        "Event Settings"
      ]
    },
    {
      "name": "Settings",
      "tags": [
        "User",
        "Audit Log",
        "API Token",
        "Maintenance Configuration",
        "Synthetic Calls"
      ]
    },
    {
      "name": "Instana",
      "tags": [
        "Health",
        "Usage"
      ]
    }
  ]
}
